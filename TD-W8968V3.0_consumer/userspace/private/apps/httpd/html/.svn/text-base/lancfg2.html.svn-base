<html>
   <head>
      <meta HTTP-EQUIV='Pragma' CONTENT='no-cache'>
      <link rel="stylesheet" href='stylemain.css' type='text/css'>
         <link rel="stylesheet" href='colors.css' type='text/css'>
            <script language="javascript" src="util.js"></script>
            <script language="javascript">
<!-- hide
var sessionKey='<%ejGetOther(sessionKey)%>';
var state = '<%ejGet(lanRefresh)%>';
if ( state == '1' ) {
   var loc = 'lancfg2.cgi?lanRefresh=0';
   loc += '&sessionKey=' + sessionKey;
   var code = 'location="' + loc + '"';
   eval(code);
}

var dhcpStart = '<%ejGet(dhcpEthStart)%>';
var dhcpEnd = '<%ejGet(dhcpEthEnd)%>';
var dhcpLease = '<%ejGet(dhcpLeasedTime)%>';
var enblLanFirewall = '<%ejGet(enblLanFirewall)%>';
var proto = '<%ejGetOther(sysInfo, noBrPrtcl)%>';
var ipExt = '<%ejGetOther(sysInfo, pppIpExtension)%>';
var dhcpEnbl = '<%ejGet(enblDhcpSrv)%>';
var enblIgmpSnp = '<%ejGetOther(sysInfo, enblIgmpSnp)%>';
var enblIgmpMode = '<%ejGetOther(sysInfo, enblIgmpMode)%>';
var staticiplease_count = 0;
var dhcpRelayServer = '<%ejGet(dhcpRelayServer)%>';
var natEnbl = '<%ejGetOther(sysInfo, enblNat)%>';
var buildDhcpRelay = '<%ejGetOther(sysInfo, buildDhcpRelay)%>';

var lanGroupName = '<%ejGet(brName)%>';
var lanIpAddr = '<%ejGet(ethIpAddress)%>';
var lanIpMask = '<%ejGet(ethSubnetMask)%>';
var changeIporMaskWarning = "Modification of LAN IP address or subnet mask will require you to re-login. The Modem Router may also become unaccessible from the this PC. Would you like to continue?";

/*added by zhangshen*/
var wanips = '<%ejGetOther(sysInfo, wanips)%>';
/*end added*/

/* added by yanglei, 2012-2-3 */
var MAX_ENTRY = 32;
var entryList = (function() {
	var info = '<%ejGetOther(staticiplease)%>';
	info = info ? info.split('|') : new Array();
	var i = info.length;
	while (--i >= 0) {
		info[i] = info[i].split('/');
	}
	return info;
})();

function getEntry(i) {
	return entryList[i][0];
}

function enableClick(i, enable) {
	go('dhcpdstaticlease.cmd?action=enable&entry='+getEntry(i) + '&enable='+enable, sessionKey);
}

function editClick(i) {
	go('dhcpdstaticlease.cmd?action=edit&entry='+getEntry(i), sessionKey);
}

function addClick() {
	go('StaticIpAdd.html');
}

function enableAllClick() {
	if (entryList.length > 0)
		go('dhcpdstaticlease.cmd?action=enable&entry=&enable=1', sessionKey);
}

var glbAllSelected = false;
function selectAllClick() {
	var rml = document.forms[0].rml;
    if(rml)
    {
	if (!(rml.length > 0)) {
		rml = new Array(rml);
	}
	glbAllSelected = !glbAllSelected;
	var i = rml.length;
	while (--i >= 0) {
		rml[i].checked = glbAllSelected;
	}
}
}

function removeClick() {
	var rml = document.forms[0].rml;
	  if(rml)
    {
	if (!(rml.length > 0)) {
		rml = new Array(rml);
	}
	var lst = new Array();
	for (var i = 0; i < rml.length; i++) {
		if (rml[i].checked) {
			lst.push(getEntry(i));
		}
	}
	if (lst.length == 0) return;
	go('dhcpdstaticlease.cmd?action=remove&rmLst='+lst.join(', '), sessionKey);
    }
}


//added by xieping
function genEntriesTable() {
	var html = '', v;
	for (var i = 0; i < entryList.length; i++) {
		v = entryList[i];
		html += '<tr align="center">\n\t<td>' + v[0];
		html += '</td>\n\t<td>' + v[1];
		if (v[2] == 1) {
			html += '<td class="greenText">Enabled</td>\n\t<td><input type="button" ';
			html += 'onClick="enableClick(' + i + ',0)" value="Disable"></td>\n\t';
		} else {
			html += '<td class="redText">Disabled</td>\n\t<td><input type="button" ';
			html += 'onClick="enableClick(' + i + ',1)" value="Enable"></td>\n\t';
		}
		html += '<td><input type="button" onClick="editClick(' + i + ')" value="Edit">';
		html += '</td>\n\t<td><input type="checkbox" name="rml"></td>\n</tr>\n';
	}
	document.write(html);
}

function hideRelayInfo(hide) {
   var status = 'block';

   if ( hide == 1 )
      status = 'none';
   if (document.getElementById)  // DOM3 = IE5, NS6
      document.getElementById('relayInfo').style.display = status;
   else {
      if (document.layers == false) // IE4
         document.all.relayInfo.style.display = status;
   }
}

function hideIgmpSnpInfo(hide) {
   var status = 'block';

   if ( hide == 1 )
      status = 'none';
   if (document.getElementById)  // DOM3 = IE5, NS6
      document.getElementById('igmpSnpInfo').style.display = status;
   else {
      if (document.layers == false) // IE4
         document.all.igmpSnpInfo.style.display = status;
   }
}

function hideDhcpInfo(hide) {
   var status = 'block';

   if ( hide == 1 )
      status = 'none';
   if (document.getElementById)  // DOM3 = IE5, NS6
      document.getElementById('dhcpInfo').style.display = status;
   else {
      if (document.layers == false) // IE4
         document.all.dhcpInfo.style.display = status;
   }
}

function disableDhcpSrv() {
   with ( document.forms[0] ) {
      dhcpSrvType[1].checked = false;
      dhcpEthStart.disabled = 1;
      dhcpEthEnd.disabled = 1;
      dhcpLeasedTime.value = '';
      dhcpLeasedTime.disabled = 1;
   }
}

function enableDhcpSrv(formLoad) {
   with ( document.forms[0] ) {
      dhcpSrvType[1].checked = true;
      dhcpEthStart.disabled = 0;
      dhcpEthEnd.disabled = 0;
      if (formLoad == 0)
         setDhcpAddresses(ethIpAddress.value);
      else {
         dhcpEthStart.value = dhcpStart;
         dhcpEthEnd.value = dhcpEnd;
      }
      dhcpLeasedTime.value = dhcpLease;
      dhcpLeasedTime.disabled = 0;
   }
}

function disableDhcpSrvRelay() {
   with ( document.forms[0] ) {
      dhcpSrvType[2].checked = false;
      dhcpSrvAddr.disabled = 1;
   }
}

function enableDhcpSrvRelay(formLoad) {
   with ( document.forms[0] ) {
      dhcpSrvType[2].checked = true;
      if (formLoad == 1)
         dhcpSrvAddr.value = dhcpRelayServer;
      dhcpSrvAddr.disabled = 0;
   }
}

function typeClick() {
   with ( document.forms[0] ) {
      // if any protocol has NAT enabled then
      // don't show DHCP relay
         if ( dhcpSrvType[0].checked == true ) {
            disableDhcpSrv();
            disableDhcpSrvRelay();
         } else if ( dhcpSrvType[1].checked == true ) {
            enableDhcpSrv(0);
            disableDhcpSrvRelay();
         } else {
            enableDhcpSrvRelay(0);
            disableDhcpSrv();
         }
   }
}

function firewallClick() {
}

function igmpClick(cb) {
   if (cb.checked == true)
      hideIgmpSnpInfo(0)
   else
      hideIgmpSnpInfo(1);
}



function changeBrName() {
   var loc = 'lancfg2get.cgi?';   
   with ( document.forms[0] ) { 
       loc += 'brName=' + brName.value;   
   }
   loc += '&sessionKey=' + sessionKey;
   var code = 'location="' + loc + '"';
   eval(code);
}

function frmLoad() {
   with ( document.forms[0] ) {
   
      brName.value = lanGroupName;
      ethIpAddress.value = lanIpAddr;
      ethSubnetMask.value = lanIpMask;

      /*if ( enblLanFirewall == '1' )
        chkLanFirewallEnbl.checked = true;
      else
        chkLanFirewallEnbl.checked = false;*/

      if ( enblIgmpSnp == '1' ) {
        chkIgmpSnp.checked = true;
        hideIgmpSnpInfo(0);
      } else {
        chkIgmpSnp.checked = false;
        hideIgmpSnpInfo(1);
      }

      if ( enblIgmpMode == '1' ) {
    	igmpMode[0].checked = false;
    	igmpMode[1].checked = true;
      } else {
        igmpMode[0].checked = true;
        igmpMode[1].checked = false;
      }


      // if protocol is Bridge or PPP IP extension
      // then don't show DHCP info
      if (/*proto == 'Bridge' || */ipExt == '1') /*modified by zhangshen,for bug-509*/
         hideDhcpInfo(1);
      else {
         // if dhcp relay is supported and no NAT in the system display that option 
         if (buildDhcpRelay == '1')// && natEnbl == '0')
           hideRelayInfo(0);
         else 
           hideRelayInfo(1);
	// 存在未开启NAT的MER接口时DHCP Relay功能才有用
      	
		
         hideDhcpInfo(0);
         // if any protocol has NAT enabled then
         // don't show DHCP relay
            if ( dhcpEnbl == '1' ) {
               enableDhcpSrv(1);
               disableDhcpSrvRelay();
            } else if ( dhcpEnbl == '2' ) {
               enableDhcpSrvRelay(1);
               disableDhcpSrv();
            } else {
               dhcpSrvType[0].checked = true;
               disableDhcpSrv();
               disableDhcpSrvRelay();
            }
         lan2IpAddress.value = '<%ejGet(lan2IpAddress)%>';
         lan2SubnetMask.value = '<%ejGet(lan2SubnetMask)%>';
         if ('<%ejGet(enblLan2)%>' == '1') {
            enblLan2.checked = true;
            hideLan2Info(0);
         } else {
            enblLan2.checked = false;
            hideLan2Info(1);
         }
      }
   }
}

function hideLan2Info(hide) {
   var status = 'block';

   if ( hide == 1 )
      status = 'none';
   if (document.getElementById)  // DOM3 = IE5, NS6
      document.getElementById('lan2Info').style.display = status;
   else {
      if (document.layers == false) // IE4
         document.all.lan2Info.style.display = status;
   }
}

function lan2CbClick(cb) {
   if ( cb.checked == true )
      hideLan2Info(0);
   else
      hideLan2Info(1);
}

function isEndGTEStart(EndIp, StartIp)
{
   addrEnd = EndIp.split('.');
   addrStart = StartIp.split('.');
   E = parseInt(addrEnd[3]) + 1;
   S = parseInt(addrStart[3]) + 1;
   if (E < S) 
      return false;
   return true;
}

function btnSave(reboot) {
   var loc = 'lancfg2.cgi?';

   if (reboot)
      loc = 'lancfg2Reset.cgi?';

   with ( document.forms[0] ) {
      if ( isValidIpAddress(ethIpAddress.value) == false ) {
		 alertAndFocus(ethIpAddress, 'Address "' + ethIpAddress.value + '" is invalid IP address.');
         return;
      }
      if ( isValidSubnetMask(ethSubnetMask.value) == false ) {
		 alertAndFocus(ethSubnetMask, 'Subnet mask "' + ethSubnetMask.value + '" has invalid SubnetMask address.');
         return;
      }
	  
	   if ( isValidHostIp(ethIpAddress.value,ethSubnetMask.value) == false)
		{
			alertAndFocus(ethIpAddress, "Invalid Host's IP address with SubnetMask address");
			return;
		}	  
	  
		/*Added by zhangshen*/
		var netid;
		if( wanips != "No_WanIp")
		{
			netid = wanips.split('|');
			for (i = 0 ;i< netid.length ; i++)
			{
				netip = netid[i].split('*');
				var tIp, tMask;
				tIp = 0;
				tMask = 0;
				for (j = 0; j < 4; j++)
				{
					num1 = parseInt(((ethIpAddress.value).split('.'))[j]);
					num2 = parseInt(((ethSubnetMask.value).split('.'))[j]);
					if (j == 0)
					{
						tIp += (num1*256*256*256);
						tMask += (num2*256*256*256);
					}
					if (j == 1)
					{
						tIp += (num1*256*256);
						tMask += (num2*256*256);
					}
					if (j == 2)
					{
						tIp += (num1*256);
						tMask += (num2*256);
					}
					if (j == 3)
					{
						tIp += (num1);
						tMask += (num2);
					}
				}
				if (1 == parseInt(netip[1]))
				{
					if ((parseInt(netip[0]) & parseInt(tMask)) == (parseInt(tIp) & parseInt(tMask)))
					{
						msg = "The Lan IP address (" + ethIpAddress.value + ") is in the same Subnet with Wan IP address!";
						alertAndFocus(ethIpAddress, msg);
						return;
					}
				}
				else
				{
					if (((parseInt(netip[0]) & parseInt(tMask)) == (parseInt(tIp) & parseInt(tMask)))
						|| ((parseInt(netip[0]) & parseInt(netip[1])) == (parseInt(tIp) & parseInt(netip[1]))))
					{
						msg = "The Lan IP address (" + ethIpAddress.value + ") is in the same Subnet with Wan IP address!";
						alertAndFocus(ethIpAddress, msg);
						return;
					}
				}
			}
		}
		/*end added*/	  
      loc += 'ethIpAddress=' + ethIpAddress.value;
      loc += '&ethSubnetMask=' + ethSubnetMask.value;

    /* if ( chkLanFirewallEnbl.checked == true )
        loc += '&enblLanFirewall=1';
     else*/
        loc += '&enblLanFirewall=0';

     
	 if ( chkIgmpSnp.checked == true )
        loc += '&enblIgmpSnp=1';
     else
        loc += '&enblIgmpSnp=0';
    if ( igmpMode[1].checked == true )
        loc += '&enblIgmpMode=1';
     else
        loc += '&enblIgmpMode=0';
      if ( dhcpSrvType[1].checked == true ) {
         if (isValidIpAddress(dhcpEthStart.value) == false || 
               !(isSameSubNet(ethIpAddress.value, ethSubnetMask.value, dhcpEthStart.value, ethSubnetMask.value))) {
			alertAndFocus(dhcpEthStart, 'Start IP address "' + dhcpEthStart.value + '" is invalid IP address.');
            return;
         }
         if ( isValidIpAddress(dhcpEthEnd.value) == false ||
               !(isSameSubNet(ethIpAddress.value, ethSubnetMask.value, dhcpEthEnd.value, ethSubnetMask.value))) {
			alertAndFocus(dhcpEthEnd, 'End IP address "' + dhcpEthEnd.value + '" is invalid IP address.');
            return;
         }   
         if (!(isEndGTEStart(dhcpEthEnd.value, dhcpEthStart.value))) {
			alertAndFocus(dhcpEthEnd, "End ip has to be equal or greater than Start Ip address.");
            return;
         }
         if (dhcpEthStart.value == ethIpAddress.value) {
			alertAndFocus(dhcpEthStart, "Start IP has to be different from LAN IP address.");
            return;
         }
         if (dhcpEthEnd.value == ethIpAddress.value) {
			alertAndFocus(dhcpEthEnd, "End IP has to be different from LAN IP address.");
            return;
         }		 
         if ( isNaN(dhcpLeasedTime.value) == true || dhcpLeasedTime.value <= 0) {
			alertAndFocus(dhcpLeasedTime, 'Leased time "' + dhcpLeasedTime.value + '" is invalid.');
            return;
         }
		 
	    /*Added by zhangshen, for bug 11397*/
	    if ( parseInt(dhcpLeasedTime.value) > 48) {
		  alertAndFocus(dhcpLeasedTime, 'Leased time "'+ dhcpLeasedTime.value +'" is beyond the range.');
	      return;
	    }
         /*End Added*/		 
         loc += '&dhcpEthStart=' + dhcpEthStart.value;
         loc += '&dhcpEthEnd=' + dhcpEthEnd.value;
         loc += '&dhcpLeasedTime=' + dhcpLeasedTime.value;
         loc += '&enblDhcpSrv=1';
      } else {
            if ( dhcpSrvType[2].checked == true ) {
               if ( isValidIpAddress(dhcpSrvAddr.value) == false ) {
				  alertAndFocus(dhcpSrvAddr, 'DHCP server IP address "' + dhcpSrvAddr.value + '" is invalid IP address.');
                  return;
               }
               loc += '&dhcpRelayServer=' + dhcpSrvAddr.value;
               loc += '&enblDhcpSrv=2';
            } else
               loc += '&enblDhcpSrv=0';
      }
      if (enblLan2.checked == true) {
         if ( isValidIpAddress(lan2IpAddress.value) == false ) {
			alertAndFocus(lan2IpAddress, 'Address "' + lan2IpAddress.value + '" is invalid IP address.');
            return;
         }
         if ( isValidSubnetMask(lan2SubnetMask.value) == false ) {
			alertAndFocus(lan2SubnetMask, 'Subnet mask "' + lan2SubnetMask.value + '" has invalid SubnetMask address.');
            return;
         }
         if (ethIpAddress.value == lan2IpAddress.value) {
			alertAndFocus(ethIpAddress, 'The IP address "' + ethIpAddress.value + '" for both LAN interfaces should not be the same.');
            return;
         }
         if (isSameSubNet(ethIpAddress.value, ethSubnetMask.value, lan2IpAddress.value, lan2SubnetMask.value)) {
			alertAndFocus(ethIpAddress, 'The Subnet can not be the same for both LAN interfaces.');
            return;
         }
         loc += '&enblLan2=1';
         loc += '&lan2IpAddress=' + lan2IpAddress.value;
         loc += '&lan2SubnetMask=' + lan2SubnetMask.value;
      }
      else
         loc += '&enblLan2=0';
		 
	if((ethIpAddress.value != lanIpAddr) || (ethSubnetMask.value != lanIpMask))
   {
		if(!confirm(changeIporMaskWarning))
			return;
   }
   }
   
   loc += '&sessionKey=' + sessionKey;
   var code = 'location="' + loc + '"';
   eval(code);
}

function setDhcpAddresses() {
   var ipArr = [0, 0, 0, 0],  maskArr = [0, 0, 0, 0], startArr = [0, 0, 0, 0],  endArr = [0, 0, 0, 0];
   
   with ( document.forms[0] ) {
      lanIp = ethIpAddress.value;
      subnetMask = ethSubnetMask.value;
      if ( isValidIpAddress(lanIp) == false ) {
		 alertAndFocus(ethIpAddress, 'Address "' + lanIp + '" is invalid IP address.');
         return;
      }
      if ( isValidSubnetMask(subnetMask) == false ) {
		 alertAndFocus(ethSubnetMask, 'Address "' + subnetMask + '" is invalid SubnetMask address.');
         return;
      }      
      addrParts = lanIp.split('.');
      maskParts = subnetMask.split('.');       
      if ( addrParts.length != 4 || maskParts.length != 4) {
		 alertAndFocus(ethIpAddress, 'Invalid ip/subnetMask');
         return;
      }         
      for (i = 0; i < 4; i++) {
        ipArr[i] = parseInt(addrParts[i]);
        startArr[i] = parseInt(addrParts[i]);
        endArr[i] = parseInt(addrParts[i]);
        maskArr[i] = parseInt(maskParts[i]);
      }
      m3 = maskArr[3];
      bcast = 255;
      n3 = 0;
      if (maskArr[0] == 255 && maskArr[1] == 0 &&  maskArr[2] == 0 && maskArr[3] == 0) {
        /* 255.0.0.0 is only class A supported */
        endArr[1] = 255;
        endArr[2] = 255;
      }
      else if (maskArr[0] == 255 && maskArr[1] == 255 &&  maskArr[2] == 0 && maskArr[3] == 0) 
        /* 255.255.0.0 is only class B supported */
        endArr[2] = 255;
      else if ((maskArr[0] == 255 && maskArr[1] == 255 &&  maskArr[2] == 255 ) &&
               (m3 == 0 || m3 == 128 || m3 == 192 || m3 == 224 || m3== 240 || m3 == 248 ||  m3 == 252)) {
        /* 255.255.255.0/128/192... class C supported */
        n3 = ipArr[3] & m3;
        hosts = 255 - m3;
        bcast = n3 + hosts;
      }
      else {
		alertAndFocus(ethSubnetMask, "Only support subnet mask: Class A: 255.0.0.0; Class B: 255.255.0.0 and Class C: 255.255.255.0/255.255.255.128/255.255.255.192/255.255.255.224/255.255.255.240/255.255.255.248/255.255.255.252.");
        return;         
      }
      if (ipArr[3] == bcast) {
		alertAndFocus(ethIpAddress, 'Ip address cannot be same as the broadcast ip address.');
        return;
      }
      dhcpEthStart.value = dhcpEthEnd.value = "";      
      for (i = 0; i < 3; i++) {
         dhcpEthStart.value = dhcpEthStart.value + startArr[i] + ".";
         dhcpEthEnd.value = dhcpEthEnd.value + endArr[i] + ".";
      }
      if (ipArr[3] == (bcast-1)) {
        startArr[3] = n3 + 1;
        endArr[3] = bcast -2;
      }
      else {
        startArr[3] = ipArr[3] + 1;
        endArr[3] = bcast -1;
      }
      n3 = parseInt(dhcpStart.split('.')[3], 10);
      if (startArr[3] < n3) startArr[3] = n3;
      n3 = parseInt(dhcpEnd.split('.')[3], 10);
      if (endArr[3] > n3) endArr[3] = n3;      
      dhcpEthStart.value = dhcpEthStart.value + startArr[3];
      dhcpEthEnd.value = dhcpEthEnd.value + endArr[3];
   }
}


// done hiding -->
</script>
</head>
<body onLoad='frmLoad()'>
<center>
<form>
	<table>
		<tr><td class=h1 colspan = 2 style="height: 28px">Local Area Network (LAN)&nbsp;Setup</td></tr>
		<tr><td class=blue colspan=2></td></tr>
		<tr><td colspan = 2>Configure the DSL Modem Router IP Address and Subnet Mask for LAN&nbsp;interface.&nbsp; GroupName <%ejGet(groupList)%></td></tr>
		<tr><td colspan = 2>&nbsp;</td></tr>
		<tr>
			<td class="item">IP Address:</td>
			<td><input align=left type='text' name='ethIpAddress' onChange='setDhcpAddresses()'></td>
		</tr>
		<tr>
			<td class="item">Subnet Mask:</td>
			<td><input align='left' type='text' name='ethSubnetMask' onChange='setDhcpAddresses()'></td>
		</tr>
		<tr><td class=blue colspan=2></td></tr>
		<tr>
			<td colspan=2><input type='checkbox' name='chkIgmpSnp' onClick='igmpClick(this)'>&nbsp;&nbsp;Enable IGMP Snooping</td>
		</tr>
	</table>
	<div id='igmpSnpInfo'>
		<table border="0" cellpadding="0" cellspacing="0">
			<tr>
				<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<input type='radio' name='igmpMode'> Standard Mode</td>
			</tr>
			<tr>
				<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<input type='radio' name='igmpMode'> Blocking Mode</td>
			</tr>
		</table>
	</div>
<!--
	<div id='firewallEnbl'>
		<table border="0" cellpadding="0" cellspacing="0">
			<tr><td class=blue></td></tr>
			<tr>
				<td><input type='checkbox' name='chkLanFirewallEnbl' onClick='firewallClick(this)'>&nbsp;&nbsp;Enable LAN side firewall</td>
			</tr>
			<tr><td>
				NOTE: If "LAN side firewall" is enabled, all PCs in the LAN will not able to manage the Router. Please make sure you have set a PC allowed to manage the Router on "Security-&gt;IP Filtering-&gt;Incoming" page.
			</td></tr>
		</table>
	</div>
-->
	<div id='dhcpInfo'>
		<table border="0" cellpadding="0" cellspacing="0">
			<tr><td class=blue colspan=2></td></tr>
			<tr>
				<td colspan="2"><input type='radio' name='dhcpSrvType' onClick='typeClick()'>&nbsp;&nbsp;Disable DHCP Server</td>
			</tr>
			<tr>
				<td colspan="2"><input type='radio' name='dhcpSrvType' onClick='typeClick()'>&nbsp;&nbsp;Enable DHCP Server</td>
			</tr>
			<tr>
				<td class='item'>Start IP Address:</td>
				<td><input type='text' name='dhcpEthStart'></td>
			</tr>
			<tr>
				<td class='item'>End IP Address:</td>
				<td><input type='text' name='dhcpEthEnd'></td>
			</tr>
			<tr>
				<td class='item'>Leased Time (hour):</td>
				<td><input type='text' name='dhcpLeasedTime'>&nbsp;&nbsp;(1~48)</td>
			</tr>
			<tr><td colspan="2">
				<b>Static IP Lease List: (A maximum <script type="text/javascript"><!-- hide
			document.write(MAX_ENTRY);
		// done hiding --></script> entries can be configured)</b>
			</td></tr>
			<tr><td colspan="2">
				<table border='1' cellpadding='3' cellspacing='0'>
					<tr align='center'>
						<td class='hd'>MAC Address</td>
						<td class='hd'>IP Address</td>
						<td class='hd'>Status</td>
						<td class='hd'>Enable/Disable</td>
						<td class='hd'>Edit</td>
						<td class='hd'>Remove</td>
					</tr>
					<script language="javascript"><!-- hide
						genEntriesTable();
					// done hiding --></script>
				</table>
			</td></tr>
			<tr><td colspan="2"><center>
				<script type="text/javascript"><!-- hide
				if (entryList.length < MAX_ENTRY) {
					document.write('<input type="button" onClick="addClick()" value="Add">');
							}
				// done hiding --></script>
				<input type="button" onClick="enableAllClick()" value="Enable All">
				<input type="button" onClick="selectAllClick()" value="Select All">
				<input type="button" onClick="removeClick()" value="Remove">
			</center></td></tr>
		</table>
		<div id='relayInfo'>
			<table border="0" cellpadding="0" cellspacing="0">
				<tr>
					<td colspan="2"><input type='radio' name='dhcpSrvType' onClick='typeClick()'>&nbsp;&nbsp;Enable DHCP Server Relay</td>
				</tr>
				<tr>
					<td class='item'>DHCP Server IP Address:</td>
					<td><input type='text' name='dhcpSrvAddr'></td>
				</tr>
				<tr><td colspan="2">Note: You have to disable NAT of the WAN connections. Or the DHCP Relay may not take effect!</td></tr>
			</table>
		</div>

		<table border="0" cellpadding="0" cellspacing="0">
			<tr><td class=blue></td></tr>
			<tr>
				<td><input type='checkbox' name='enblLan2' onClick='lan2CbClick(this)'>&nbsp;&nbsp;Configure the second IP Address and Subnet Mask for LAN interface</td>
			</tr>
		</table>
		<div id='lan2Info'>
			<table border="0" cellpadding="0" cellspacing="0">
				<tr>
					<td class='item'>IP Address:</td>
					<td><input type='text' name='lan2IpAddress'></td>
				</tr>
				<tr>
					<td class='item'>Subnet Mask:</td>
					<td><input type='text' name='lan2SubnetMask'></td>
				</tr>
			</table>
		</div>
	</div>

  <table>
    <tr><td class="blue"></td></tr>
    <tr><td><center>
			<input type='button' onClick='btnSave(0)' class="buttonL" value='Save/Apply'>
    </center></td></tr>
  </table>
</form>
</center>
</body>
</html>
